{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","window","addEventListener","manipularMovimentoDoMouse","componentWillUnmount","e","elemento_gato","document","getElementById","posX","clientX","clientWidth","posY","clientY","clientHeight","console","log","setState","posMouseX","posMouseY","state","react_default","a","createElement","id","style","minHeight","background","className","position","transition","transform","Number","React","Component","Boolean","location","hostname","match","ReactDOM","render","App_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAIqBA,qBACjB,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMVQ,kBAAoB,WAChBC,OAAOC,iBAAiB,YAAaT,EAAKU,4BAR5BV,EAUlBW,qBAAuB,WACnBH,OAAOC,iBAAiB,YAAaT,EAAKU,4BAX5BV,EAalBU,0BAA4B,SAACE,GACzB,IAAIC,EAAgBC,SAASC,eAAe,yBACxCC,EAAQJ,EAAEK,QAASJ,EAAcK,YAAY,EAC7CC,EAAQP,EAAEQ,QAASP,EAAcQ,aAAa,EAC9CF,EAAO,GAAIA,EAAK,GACXA,GAAQ,KAAIA,GAAM,IACvBH,EAAO,GAAIA,EAAK,GACXA,GAAQ,KAAIA,GAAM,IAC3BM,QAAQC,IAAIP,GACZhB,EAAKwB,SAAS,CAACC,UAAUT,EAAKU,UAAUP,KApBxCnB,EAAK2B,MAAQ,CACTF,UAAW,EACXC,UAAW,GAJD1B,wEAyBd,OACM4B,EAAAC,EAAAC,cAAA,OAAKC,GAAG,wBAAwBC,MAAO,CAACC,UAAU,QAASC,WAAW,WAAYC,UAAU,IAC1FP,EAAAC,EAAAC,cAAA,OAAKC,GAAG,gBAAgBC,MAAO,CAACI,SAAS,YAAaD,UAAU,wBAC5DP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACfP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACfP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,SACXP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,YAAYH,MAAO,CAACK,WAAW,KAAMC,UAAU,eAAenC,KAAKwB,MAAMF,UAAU,MAAMc,OAAOpC,KAAKwB,MAAMD,UAAU,IAAI,UACpIE,EAAAC,EAAAC,cAAA,OAAKK,UAAU,UACfP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,WACfP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,WACfP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,cACfP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,cACfP,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACM,UAAU,2CAA4CH,UAAU,WAC7EP,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACM,UAAU,6BAA8BH,UAAU,WAC/DP,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACM,UAAU,2CAA4CH,UAAU,WAC7EP,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACM,UAAU,6CAA8CH,UAAU,WAC/EP,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACM,UAAU,2CAA4CH,UAAU,WAC7EP,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACM,UAAU,2CAA4CH,UAAU,sBA3CxEK,IAAMC,YCQnBC,QACW,cAA7BlC,OAAOmC,SAASC,UAEe,UAA7BpC,OAAOmC,SAASC,UAEhBpC,OAAOmC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASlC,SAASC,eAAe,SD2H3C,kBAAmBkC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.99915c47.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nexport default class App extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            posMouseX: 0,\n            posMouseY: 0\n        }\n    }\n    componentDidMount = ()=>{\n        window.addEventListener('mousemove', this.manipularMovimentoDoMouse);\n    }\n    componentWillUnmount = () => {\n        window.addEventListener('mousemove', this.manipularMovimentoDoMouse);\n    }\n    manipularMovimentoDoMouse = (e) =>{\n        let elemento_gato = document.getElementById('embrulho-criatividade')\n        let posX = (e.clientX-(elemento_gato.clientWidth/2))\n        let posY = (e.clientY-(elemento_gato.clientHeight/2))\n        if (posY > 20){posY=20}\n        else if (posY < -20){posY=-20}\n        if (posX > 20){posX=20}\n        else if (posX < -20){posX=-20}\n        console.log(posX)\n        this.setState({posMouseX:posX,posMouseY:posY})\n    }\n    render(){\n        return(\n              <div id='embrulho-criatividade' style={{minHeight:'100vh', background:'#1a273c'}} className=''>\n                <div id='embrulho-gato' style={{position:'absolute'}} className='centro embrulho-gato'>\n                    <div className='orelha-e'/>\n                    <div className='orelha-d'/>\n                    <div className='rosto'>\n                        <div className='face-gato' style={{transition:'1s', transform:'translate3d('+this.state.posMouseX+'px,'+Number(this.state.posMouseY+30)+'px,0)'}}>\n                            <div className='nariz'/>\n                            <div className='olho-e'/>\n                            <div className='olho-d'/>\n                            <div className='focinho-e'/>\n                            <div className='focinho-d'/>\n                            <div style={{transform:'translate3d(55px,-30px,0) rotate(25deg)'}} className='bigode'/>\n                            <div style={{transform:'translate3d(53px,-10px,0)'}} className='bigode'/>\n                            <div style={{transform:'translate3d(55px,10px,0) rotate(-25deg)'}} className='bigode'/>\n                            <div style={{transform:'translate3d(170px,-35px,0) rotate(-25deg)'}} className='bigode'/>\n                            <div style={{transform:'translate3d(175px,-18px,0) rotate(0deg)'}} className='bigode'/>\n                            <div style={{transform:'translate3d(170px,-0px,0) rotate(25deg)'}} className='bigode'/>\n                        </div>\n                    </div>   \n                </div>\n            </div>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}